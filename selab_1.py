# -*- coding: utf-8 -*-
"""SELAB-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BJpKqZgpGWw3LeQvU3IR38fQgL55yX-Z
"""

import matplotlib.pyplot as plt
import numpy as np
def quad_model(time):
  a=0.3
  b=1.2
  c=10
  temp= a*(time**2)+b*time+c
  return temp

def main():
  time_val = np.linspace(0, 10, 50)
  temp_cal1 = quad_model(time_val)
  plt.plot(time_val, temp_cal1, label='hard_coded variables')
  plt.xlabel('Time')
  plt.ylabel('Temperature')
  plt.legend()
  plt.title('Weather Modelling ')
  plt.grid(True)
  plt.show()
if __name__ == '__main__':
    main()

import matplotlib.pyplot as plt
import numpy as np
def quad_model2(time):
  a= float(input("Enter the values of a: "))
  b= float(input("Enter the values of b: "))
  c= float(input("Enter the values of c: "))
  temp= a*(time**2)+b*time+c
  return temp
def main():
  time_val = np.linspace(0, 10, 50)
  temp_cal2 = quad_model2(time_val)
  plt.plot(time_val, temp_cal2, label='user input variables')
  plt.xlabel('Time')
  plt.ylabel('Temperature')
  plt.legend()
  plt.title('Weather Modelling ')
  plt.grid(True)
  plt.show()
if __name__ == '__main__':
    main()

import matplotlib.pyplot as plt
import numpy as np
def quad_model(time):
  a=0.3
  b=1.2
  c=10
  temp= a*(time**2)+b*time+c
  return temp

def quad_model2(time):
  a= float(input("Enter the values of a: "))
  b= float(input("Enter the values of b: "))
  c= float(input("Enter the values of c: "))
  temp= a*(time**2)+b*time+c
  return temp

def main():
  time_val = np.linspace(0, 10, 50)
  temp_cal1 = quad_model(time_val)
  plt.plot(time_val, temp_cal1, label='hard_coded variables')
  temp_cal2 = quad_model2(time_val)
  plt.plot(time_val, temp_cal2, label='user input variables')
  plt.xlabel('Time')
  plt.ylabel('Temperature')
  plt.legend()
  plt.title('Weather Modelling ')
  plt.grid(True)
  plt.show()
if __name__ == '__main__':
    main()

"""A"""

import matplotlib.pyplot as plt
import numpy as np
def quad_model(m,time):
  a=m[0]
  b=m[1]
  c=m[2]
  temp= a*(time**2)+b*time+c
  return temp

def main():
  time_val = np.linspace(0, 10, 50)
  l=[(10,20,15),(11,2.3,31),(14,8.2,3.2)]
  temp_cal= quad_model(l[0],time_val)
  plt.plot(time_val, temp_cal, label='set-1 (10,20,15)')
  temp_cal= quad_model(l[1], time_val)
  plt.plot(time_val, temp_cal, label='set-2 (11,2.3,31)')
  temp_cal= quad_model(l[2], time_val)
  plt.plot(time_val, temp_cal, label='set-3 (14,8.2,3.2)')
  plt.xlabel('Time')
  plt.ylabel('Temperature')
  plt.legend()
  plt.title('Weather Modelling HARD_CODED MULTIPLE SETS')
  plt.grid(True)
  plt.show()
if __name__ == '__main__':
    main()

import matplotlib.pyplot as plt
import numpy as np
def quad_model(m,time):
  a=float(m[0])
  b=float(m[1])
  c=float(m[2])
  temp= a*(time**2)+b*time+c
  return temp

def main():
  time_val = np.linspace(0, 10, 50)
  f=open('lst.txt','r')
  l = [line.strip().split(",") for line in f]
  f.close()
  temp_cal= quad_model(l[0],time_val)
  plt.plot(time_val, temp_cal, label='set-1 (0.1,-1,30)')
  plt.xlabel('Time')
  plt.ylabel('Temperature')
  plt.legend()
  plt.title('Weather Modelling SINGLE SET from FILE')
  plt.grid(True)
  plt.show()
if __name__ == '__main__':
    main()

import matplotlib.pyplot as plt
import numpy as np
def quad_model(m,time):
  a=float(m[0])
  b=float(m[1])
  c=float(m[2])
  temp= a*(time**2)+b*time+c
  return temp

def main():
  time_val = np.linspace(0, 10, 50)
  f=open('lst2.txt','r')
  d = f.readlines()
  f.close()
  l= []
  for line in d:
    values = line.strip().split(',')
    l.append(values)
  temp_cal= quad_model(l[0],time_val)
  plt.plot(time_val, temp_cal, label='set-1 (10,20,15)')
  temp_cal= quad_model(l[1], time_val)
  plt.plot(time_val, temp_cal, label='set-2 (11,2.3,31)')
  temp_cal= quad_model(l[2], time_val)
  plt.plot(time_val, temp_cal, label='set-3 (14,8.2,3.2)')
  plt.xlabel('Time')
  plt.ylabel('Temperature')
  plt.legend()
  plt.title('Weather Modelling MULTIPLE SETS from FILE')
  plt.grid(True)
  plt.show()
if __name__ == '__main__':
    main()